// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.7.0'
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdk 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        consumerProguardFiles 'proguard-rules.txt'
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static"
                // In case you need to see the build commands used by CMake, try
                // arguments "-DANDROID_STL=c++_static", "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
                abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            stl 'c++_static'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    kotlin {
//        jvmToolchain(8)
//    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    ndkVersion '23.1.7779620'
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    compileOnly "androidx.annotation:annotation:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    kapt project(path: ':ejecta-v8:v8annotations-compiler')
    api project(path: ':ejecta-v8:v8annotations')
    api 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
}

task distributeDebug() {
    doFirst {
        delete "dist/debug"
        mkdir "dist/debug/jni"
        copy {
            from "build/intermediates/cmake/debug/obj"
            into "dist/debug/jni"
        }
    }
}

task distributeRelease {
    doFirst {
        delete "dist/release"
        mkdir "dist/release/jni"
        copy {
            from "build/intermediates/cmake/release/obj"
            into "dist/release/jni"
        }
    }
}

afterEvaluate {
    copyDebugJniLibsProjectOnly.finalizedBy distributeDebug
    copyReleaseJniLibsProjectOnly.finalizedBy distributeRelease
}
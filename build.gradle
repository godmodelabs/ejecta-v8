// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.4.10'
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.txt'
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static"
                // In case you need to see the build commands used by CMake, try
                // arguments "-DANDROID_STL=c++_static", "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
                abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            stl 'c++_static'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    ndkVersion '23.1.7779620'
}

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
    maven { url "https://jitpack.io" }
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    compileOnly "androidx.annotation:annotation:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    kapt project(path: ':ejecta-v8:v8annotations-compiler')
    api project(path: ':ejecta-v8:v8annotations')
    api 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
}

task distributeDebug() {
    doFirst {
        delete "dist/debug"
        mkdir "dist/debug/jni"
        copy {
            from "build/intermediates/cmake/debug/obj"
            into "dist/debug/jni"
        }
    }
}

task distributeRelease {

    doFirst {
        delete "dist/release"
        mkdir "dist/release/jni"
        copy {
            from "build/intermediates/cmake/release/obj"
            into "dist/release/jni"
        }
    }
}

afterEvaluate {
    copyDebugJniLibsProjectOnly.finalizedBy distributeDebug
    copyReleaseJniLibsProjectOnly.finalizedBy distributeRelease
}

// Upload to bintray
def createPom(pom) {
    return pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        configurations.implementation.allDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('artifactId', 'ejecta-v8')
            dependencyNode.appendNode('scope', 'compile')
            dependencyNode.appendNode('groupId', 'de.boersego')
            dependencyNode.appendNode('version', '1.0.0')
            dependencyNode.appendNode('name', 'Ejecta-V8')
            dependencyNode.appendNode('description', 'Embed Googles v8 into your Android app and have access to high-speed canvas, AJAX and websocket implementations as well as a powerful abstraction layer to add your own extensions. Comes with a Kotlin interface.')
            dependencyNode.appendNode('url', 'https://github.com/godmodelabs/ejecta-v8')
            dependencyNode.appendNode('inceptionYear', '2013')
            dependencyNode.appendNode('packaging', 'aar')
            def licenses = dependenciesNode.appendNode('licenses')
            licenses.appendNode('name', 'The MIT License (MIT)')
            licenses.appendNode('url', 'https://opensource.org/licenses/MIT')
            def scm = dependenciesNode.appendNode('scm')
            scm.appendNode('connection', 'https://github.com/godmodelabs/ejecta-v8.git')
            scm.appendNode('url', 'https://github.com/godmodelabs/ejecta-v8')
            def developers = dependenciesNode.appendNode('developers')
            def developer = developers.appendNode('developer')
            developer.appendNode('id', 'unverbraucht')
            developer.appendNode('name', 'Kevin Read')
        }
    }
}

publishing {
    publications {
        android.libraryVariants.all { variant ->
            commons(MavenPublication) {
                artifact(variant.packageLibraryProvider.get().archivePath)
                groupId = 'de.boersego'
                version = '1.0.0'
                createPom(pom)
            }
        }
    }
}

Properties bintrayProperties = new Properties()
bintrayProperties.load(project.file('bintray.properties').newDataInputStream())

bintray {
    user = bintrayProperties.getProperty('user')
    key = bintrayProperties.get('key')
    configurations = ['archives']
    pkg {
        repo = 'ejecta-v8'
        name = 'ejecta-v8'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/godmodelabs/ejecta-v8.git'
        publish = true
        version {
            name = '1.0.0'
            desc = 'Ejecta-V8 1.0.0'
            released = new Date()
            vcsTag = 'v1.0.0'
        }
    }
}
